# 909. 蛇梯棋
"""
给你一个大小为 n x n 的整数矩阵 board ，方格按从 1 到 n2 编号，编号遵循 转行交替方式 ，从左下角开始 （即，从 board[n - 1][0] 开始）的每一行改变方向。

你一开始位于棋盘上的方格  1。每一回合，玩家需要从当前方格 curr 开始出发，按下述要求前进：

选定目标方格 next ，目标方格的编号在范围 [curr + 1, min(curr + 6, n2)] 。
该选择模拟了掷 六面体骰子 的情景，无论棋盘大小如何，玩家最多只能有 6 个目的地。
传送玩家：如果目标方格 next 处存在蛇或梯子，那么玩家会传送到蛇或梯子的目的地。否则，玩家传送到目标方格 next 。 
当玩家到达编号 n2 的方格时，游戏结束。
如果 board[r][c] != -1 ，位于 r 行 c 列的棋盘格中可能存在 “蛇” 或 “梯子”。那个蛇或梯子的目的地将会是 board[r][c]。编号为 1 和 n2 的方格不是任何蛇或梯子的起点。

注意，玩家在每次掷骰的前进过程中最多只能爬过蛇或梯子一次：就算目的地是另一条蛇或梯子的起点，玩家也 不能 继续移动。

举个例子，假设棋盘是 [[-1,4],[-1,3]] ，第一次移动，玩家的目标方格是 2 。那么这个玩家将会顺着梯子到达方格 3 ，但 不能 顺着方格 3 上的梯子前往方格 4 。（简单来说，类似飞行棋，玩家掷出骰子点数后移动对应格数，遇到单向的路径（即梯子或蛇）可以直接跳到路径的终点，但如果多个路径首尾相连，也不能连续跳多个路径）
返回达到编号为 n2 的方格所需的最少掷骰次数，如果不可能，则返回 -1。
"""

from typing import List



class Solution:
    def snakesAndLadders(self, board: List[List[int]]) -> int:
        n = len(board)   # 获取方阵的边长
        target = n * n     # 获取方阵尺寸，也是最后要到达目的地
        queue = [(1, 0)]   # 队列用于BFS，存放待搜索的方格编号和到达该方格时的最少移动数; 初始{1,0}入队，表示起点1，0次移动
        visited = [[False] * n for _ in range(n)]   # 用于BFS过程中标记方格是否搜索过
        # BFS
        while queue:
            curr, cnt = queue.pop(0)   # 获取队首的方格编号和到达该方格的最少移动数
            cnt += 1  # 移动数加1
            for i in range(curr + 1, min(curr + 6, target) + 1):
                # 枚举所有下一个可搜索且未搜索过的方格编号
                r, c = n-1 - (i-1) // n, (i-1) % n     # 根据方格编号获取这个编号的行和列
                c += (n-1 - 2*c) * ((n-1-r) & 1)       # 根据行数修正列数
                if visited[r][c]: continue  # 跳过搜索过的编号
                visited[r][c] = True       # 标记该编号已搜索
                next_ = i if board[r][c] == - 1 else board[r][c]    # 如果这个编号所在的方格可以转移到其他格子，转移到对应编号；否则就是在当前编号
                if next_ == target: return cnt   # 到达终点，直接返回最小移动数 
                queue.append((next_, cnt))  # 加入队列
        return -1  # 退出循环说明没有到达目的地


if __name__ == "__main__":
    board = [[-1, -1, -1, -1, -1, -1],
             [-1, -1, -1, -1, -1, -1],
             [-1, 35, -1, 13, 15, -1],
             [-1, 34, 33, 32, 31, -1],
             [-1, 30, 29, 28, 27, -1],
             [-1, 26, 25, 24, 23, 22]]
    print(Solution().snakesAndLadders(board))   
        

    board = [[-1,-1],[-1,3]]
    print(Solution().snakesAndLadders(board)) 


    board = [[-1,-1,-1],[-1,-1,-1],[-1,9,8]]
    print(Solution().snakesAndLadders(board))